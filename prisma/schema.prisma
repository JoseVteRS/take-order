// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id          String       @id @default(dbgenerated("concat('tnt_', replace(cast(gen_random_uuid() as text ), '-', ''))")) @db.Text
  name        String?
  plan        String?      @default("FREE")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  users       User[]
  restaurants Restaurant[]
}

model User {
  id          String       @id @default(dbgenerated("concat('usr_', replace(cast(gen_random_uuid() as text ), '-', ''))")) @db.Text
  email       String       @unique
  name        String?
  password    String?
  avatar      String?
  role        String       @default("VIEWER")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tenantId    String
  tenant      Tenant       @relation(fields: [tenantId], references: [id])
  restaurants Restaurant[]
}

model Restaurant {
  id         String     @id @default(dbgenerated("concat('res_', replace(cast(gen_random_uuid() as text ), '-', ''))")) @db.Text
  name       String
  dishes     Dishe[]
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime?  @updatedAt
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  tenantId   String
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
}

model Dishe {
  id           String     @id @default(dbgenerated("concat('dis_', replace(cast(gen_random_uuid() as text ), '-', ''))")) @db.Text
  name         String
  description  String?
  price        Int        @default(0)
  active       Boolean    @default(true)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  category     Category?  @relation(fields: [categoryId], references: [id])
  categoryId   String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
}

model Category {
  id           String     @id @default(dbgenerated("concat('cat_', replace(cast(gen_random_uuid() as text ), '-', ''))")) @db.Text
  name         String
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
  dishes       Dishe[]
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}
