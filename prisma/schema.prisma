generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id          String       @id @default(dbgenerated("concat('tnt_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  name        String?
  plan        String?      @default("FREE")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  restaurants Restaurant[]
  users       User[]
}

model User {
  id          String       @id @default(dbgenerated("concat('usr_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  email       String       @unique
  name        String?
  password    String?
  avatar      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tenantId    String
  active      Boolean      @default(false)
  activeToken String?      @default(uuid())
  role        Role         @default(OWNER)
  restaurants Restaurant[]
  tenant      Tenant       @relation(fields: [tenantId], references: [id])
}

model Restaurant {
  id         String     @id @default(dbgenerated("concat('res_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  name       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime?  @updatedAt
  userId     String
  tenantId   String
  categories Category[]
  dishes     Dishe[]
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  // orders      Order[]
}

model Dishe {
  id           String        @id @default(dbgenerated("concat('dis_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  name         String
  description  String?
  price        Int           @default(0)
  active       Boolean       @default(true)
  allergens    String[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  category     Category?     @relation(fields: [categoryId], references: [id])
  categoryId   String?
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])
  restaurantId String
  // dishInOrders  DishInOrder[]
}

// model Order {
//   id           String        @id @default(dbgenerated("concat('ord_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
//   createdAt    DateTime      @default(now())
//   updatedAt    DateTime?     @updatedAt
//   totalPrice   Int           @default(0)
//   dishes       DishInOrder[]
//   restaurantId String
//   restaurant   Restaurant    @relation(fields: [restaurantId], references: [id])
// }

// model DishInOrder {
//   id       String @id @default(dbgenerated("concat('dio_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
//   quantity Int
//   dishId   String
//   dish     Dishe  @relation(fields: [dishId], references: [id])
//   orderId  String
//   order    Order  @relation(fields: [orderId], references: [id])
// }

model Category {
  id           String     @id @default(dbgenerated("concat('cat_', replace((gen_random_uuid())::text, '-'::text, ''::text))"))
  name         String
  description  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  dishes       Dishe[]
}

enum Role {
  OWNER
  ADMIN
  BILLING
  USER
  TRACKER
  VIEWER
}
